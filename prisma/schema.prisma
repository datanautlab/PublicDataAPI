generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model etf {
  id                  String              @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  name                String
  isin                String              @unique
  issuer_id           String              @db.Uuid
  benchmark           String
  asset_class         String
  theme               String
  inception_date      DateTime
  investment_strategy String
  risk_level          String
  listing_exchange    String
  dividend_policy     String
  replication_method  String
  replication_model   String
  created_at          DateTime            @default(now())
  updated_at          DateTime            @default(now()) @updatedAt
  creation_units      creation_unit[]
  daily_compositions  daily_composition[]
  issuer              issuer              @relation(fields: [issuer_id], references: [id], onDelete: Cascade)
  daily_info          etf_daily_info[]
  redemption_units    redemption_unit[]

  @@index([isin])
}

model etf_daily_info {
  etf_id               String   @db.Uuid
  info_date            DateTime
  aum                  Decimal
  share_outstanding    Decimal
  nav                  Decimal
  expense_ratio        Decimal
  tracking_error       Decimal
  creation_unit_size   Int
  redemption_unit_size Int
  estimated_cash       Decimal
  derived_cash         Decimal
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  etf                  etf      @relation(fields: [etf_id], references: [id], onDelete: Cascade)

  @@id([etf_id, info_date])
}

model security {
  id                 String              @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  name               String
  isin               String              @unique
  type               String
  sector             String
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  creation_units     creation_unit[]
  daily_compositions daily_composition[]
  redemption_units   redemption_unit[]

  @@index([isin])
}

model creation_unit {
  etf_id      String   @db.Uuid
  info_date   DateTime
  security_id String   @db.Uuid
  num_shares  Decimal
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  etf         etf      @relation(fields: [etf_id], references: [id], onDelete: Cascade)
  security    security @relation(fields: [security_id], references: [id], onDelete: Cascade)

  @@id([etf_id, info_date, security_id])
}

model redemption_unit {
  etf_id      String   @db.Uuid
  info_date   DateTime
  security_id String   @db.Uuid
  num_shares  Decimal
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  etf         etf      @relation(fields: [etf_id], references: [id], onDelete: Cascade)
  security    security @relation(fields: [security_id], references: [id], onDelete: Cascade)

  @@id([etf_id, info_date, security_id])
}

model daily_composition {
  etf_id            String   @db.Uuid
  info_date         DateTime
  security_id       String   @db.Uuid
  num_shares        Decimal
  change_num_shares Decimal
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  etf               etf      @relation(fields: [etf_id], references: [id], onDelete: Cascade)
  security          security @relation(fields: [security_id], references: [id], onDelete: Cascade)

  @@id([etf_id, info_date, security_id])
}

model issuer {
  id   String @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  name String
  etf  etf[]
}
